{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppFormik","withFormik","mapPropsToValues","_ref2","email","password","update","plan","validationSchema","object","shape","string","required","min","handleSubmit","values","_ref3","setErrors","resetForm","setSubmitting","setTimeout","_ref","errors","touched","isSubmitting","react_default","a","createElement","reactstrap_es","formik_esm","type","name","placeholder","htmlFor","checked","component","value","disabled","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAyEeA,UA9BGC,YAAW,CAC3BC,iBAD2B,SAAAC,GAEzB,MAAO,CACLC,MAFgDD,EAAjCC,OAEC,GAChBC,SAHgDF,EAA1BE,UAGA,GACtBC,OAJgDH,EAAhBG,SAId,EAClBC,KALgDJ,EAARI,MAK1B,KAGlBC,iBAAkBC,mBAASC,MAAM,CAC/BN,MAAOO,mBACJP,MAAM,oBACNQ,SAAS,sBACZP,SAAUM,mBACPE,IAAI,EAAG,+CACPD,SAAS,gCAEdE,aAjB2B,SAiBdC,EAjBcC,GAiBmC,IAAvCC,EAAuCD,EAAvCC,UAAWC,EAA4BF,EAA5BE,UAAWC,EAAiBH,EAAjBG,cAG3CC,WAAW,WACY,sBAAjBL,EAAOX,MACTa,EAAU,CAAEb,MAAO,oDAEnBc,IAEFC,GAAc,IACb,OA3BWlB,CApCN,SAAAoB,GAA+C,IAA5CN,EAA4CM,EAA5CN,OAAQO,EAAoCD,EAApCC,OAAQC,EAA4BF,EAA5BE,QAASC,EAAmBH,EAAnBG,aACtC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGL,EAAQnB,OAASkB,EAAOlB,OAASqB,EAAAC,EAAAC,cAAA,UAAKL,EAAOlB,OAC9CqB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,WAE/CP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGL,EAAQlB,UACPiB,EAAOjB,UAAYoB,EAAAC,EAAAC,cAAA,UAAKL,EAAOjB,UACjCoB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,YAAY,cAErDP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,QAAQ,UACbR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,SAASG,QAASnB,EAAOT,SADvD,iBAKAmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOM,UAAU,SAASJ,KAAK,QAC7BN,EAAAC,EAAAC,cAAA,UAAQS,MAAM,QAAd,QACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,QAAd,UAGFX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,KAAK,SAASO,SAAUb,GAAhC,iBCtBQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAeC,SAASC,eAAe,SDsHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.18f84d68.chunk.js","sourcesContent":["import React from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport { Button, Container, Row, Col, FormGroup, Label} from \"reactstrap\";\n// import * as Yup from 'yup';\nimport { string, object } from \"yup\";\nimport \"./App.css\";\n\nconst App = ({ values, errors, touched, isSubmitting }) => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Form>\n            <FormGroup>\n              {touched.email && errors.email && <h2>{errors.email}</h2>}\n              <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n            </FormGroup>\n            <FormGroup>\n              {touched.password &&\n                errors.password && <h2>{errors.password}</h2>}\n              <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\n            </FormGroup>\n            <FormGroup>\n            <Label htmlFor=\"update\">\n              <Field type=\"checkbox\" name=\"update\" checked={values.update} />\n              Send updates\n            </Label>\n            </FormGroup>\n            <FormGroup>\n            <Field component=\"select\" name=\"plan\">\n              <option value=\"free\">Free</option>\n              <option value=\"paid\">Paid</option>\n            </Field>\n            </FormGroup>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\nconst AppFormik = withFormik({\n  mapPropsToValues({ email, password, update, plan }) {\n    return {\n      email: email || \"\",\n      password: password || \"\",\n      update: update || true,\n      plan: plan || \"\"\n    };\n  },\n  validationSchema: object().shape({\n    email: string()\n      .email(\"Email is invalid\")\n      .required(\"Email is required!\"),\n    password: string()\n      .min(3, \"password must contain more than 2 charactes\")\n      .required(\"password must be provided!\")\n  }),\n  handleSubmit(values, { setErrors, resetForm, setSubmitting }) {\n    //bag\n    //async tasks: fetch data from db or api\n    setTimeout(() => {\n      if (values.email === \"rraju12@gmail.com\") {\n        setErrors({ email: \"Email is already taken, please use another one!\" });\n      } else {\n        resetForm();\n      }\n      setSubmitting(false);\n    }, 2000);\n  }\n})(App);\nexport default AppFormik;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport AppFormik from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppFormik />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}